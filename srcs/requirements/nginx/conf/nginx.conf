server {
        listen 443 ssl; #ssl; indicates that this server block should handle secure connections (HTTPS) using SSL/TLS. This means the server will encrypt the traffic between itself and the client.The ssl directive enables SSL/TLS for this server block.
        #8080:80 means "forward traffic coming to port 8080 on the host to port 80 in the container."
        #In this case, accessing localhost:8080 in your browser will send traffic to the web server running inside the container on port 80.
        #the service inside the container (e.g., an NGINX web server) is bound to port 80 and is ready to handle the incoming request forwarded by the host.
        ssl_certificate ssl/inception.crt; #the path to the SSL certificate #This line specifies the path to the SSL certificate file. The certificate is used to encrypt the traffic between the server and clients.
        ssl_certificate_key ssl/inception.key; #the path to the private key #the path to the SSL certificate key file (inception.key). The key file is used to decrypt the encrypted traffic.
        ssl_protocols TLSv1.2 TLSv1.3; #Here, TLS version 1.2 and 1.3 are enabled. The server will then choose the highest version that both the client and server support (either 1.2 or 1.3 in this case) to establish a secure connection.. using TLSv1.2 ensures that connections can be established even if one party doesn't support the newer version.
        root /var/www/wordpress; #NGINX will serve files from this directory when the server receives requests. The root directive sets the document root, which is the directory where the website's files (like HTML, CSS, and images) are stored.
        index index.php; #Default PHP file to serve. default files that NGINX should look for and serve when a user requests a directory, rather than a specific file./ 
            #This defines the order in which NGINX should look for the index file when a directory is requested. An "index file" is a file that a web server (like NGINX or Apache) serves by default when a directory is requested by a user, rather than a specific file within that directory.
        location ~ \.php$ { #Nginx has configuration rules (in its configuration file, nginx.conf or a site-specific config file) that tell it to pass PHP requests to a FastCGI service. This is done using a location block for .php files.
                #Nginx does not run PHP scripts directly. Instead, it knows to pass PHP requests to the FastCGI process.
                #This opens a location block that will match any requests ending in .php. The ~ indicates a regular expression match, and \.php$ matches any file with a .php extension.
              include snippets/fastcgi-php.conf;
              #includes a predefined configuration file (fastcgi-php.conf) that contains settings for handling PHP files. /These settings typically deal with how NGINX communicates with the PHP processor to execute PHP scripts and return the result to the user.
                #This line includes a predefined configuration snippet(is a small, reusable piece of configuration code that can be included in multiple places within a server configuration file.) that sets up the necessary FastCGI parameters to pass PHP requests to the PHP processor.
              fastcgi_pass wordpress:9000; #pass PHP requests to a FastCGI service (PHP-FPM)
              #tells NGINX to pass the PHP requests to a FastCGI server running on 127.0.0.1 (which is the loopback address, meaning the server itself) on port 9000.
                #FastCGI is a protocol used to interface with the PHP processor (often PHP-FPM). Essentially, NGINX sends the PHP file to the PHP processor, which executes the script and sends back the output to NGINX, which then sends it to the user.
                #9000 is the port where the FastCGI process (e.g., PHP-FPM) is listening.
        }
}

#https://nginx.org/en/docs/http/configuring_https_servers.html#optimization
#https://nginx.org/en/docs/http/configuring_https_servers.html#chains

#---------> FastCGI <---------------------------
#FastCGI is a protocol used to interface interactive programs with a web server. it eliminates the need to start a new process for every request. By keeping the processes running.
#Unlike traditional CGI, where a new process is started for each request, FastCGI keeps a pool of processes running. These processes handle multiple requests over their lifetime

#Multiple FastCGI processes can handle multiple requests concurrently, which is particularly useful for high-traffic websites. You can configure the number of FastCGI processes to match the traffic and load on your server.
#FastCGI typically communicates with a web server over TCP or Unix domain sockets. The web server forwards requests to the FastCGI process, which processes the request, generates a response, and sends it back to the web server to deliver to the client.
#1 A user makes a request to a PHP page on a website (e.g., http://example.com/index.php).
#2The web server receives the request and, recognizing that it needs to be handled by PHP, forwards it to the FastCGI process. This is configured in the web server's configuration file.
#3 The FastCGI process (PHP-FPM in this case) receives the request, executes the PHP script, and generates the appropriate HTML output or performs other tasks.
#4 The output generated by the FastCGI process is sent back to the web server, which then delivers it to the clientâ€™s browser.
#PHP files are processed by passing requests to a FastCGI process running on the wordpress service on port 9000.